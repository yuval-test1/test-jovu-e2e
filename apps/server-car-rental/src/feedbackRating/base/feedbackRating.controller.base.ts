/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FeedbackRatingService } from "../feedbackRating.service";
import { FeedbackRatingCreateInput } from "./FeedbackRatingCreateInput";
import { FeedbackRating } from "./FeedbackRating";
import { FeedbackRatingFindManyArgs } from "./FeedbackRatingFindManyArgs";
import { FeedbackRatingWhereUniqueInput } from "./FeedbackRatingWhereUniqueInput";
import { FeedbackRatingUpdateInput } from "./FeedbackRatingUpdateInput";

export class FeedbackRatingControllerBase {
  constructor(protected readonly service: FeedbackRatingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FeedbackRating })
  async createFeedbackRating(
    @common.Body() data: FeedbackRatingCreateInput
  ): Promise<FeedbackRating> {
    return await this.service.createFeedbackRating({
      data: {
        ...data,

        customer: data.customer
          ? {
              connect: data.customer,
            }
          : undefined,

        order: data.order
          ? {
              connect: data.order,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        rating: true,

        customer: {
          select: {
            id: true,
          },
        },

        comment: true,

        order: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FeedbackRating] })
  @ApiNestedQuery(FeedbackRatingFindManyArgs)
  async feedbackRatings(
    @common.Req() request: Request
  ): Promise<FeedbackRating[]> {
    const args = plainToClass(FeedbackRatingFindManyArgs, request.query);
    return this.service.feedbackRatings({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        rating: true,

        customer: {
          select: {
            id: true,
          },
        },

        comment: true,

        order: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FeedbackRating })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async feedbackRating(
    @common.Param() params: FeedbackRatingWhereUniqueInput
  ): Promise<FeedbackRating | null> {
    const result = await this.service.feedbackRating({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        rating: true,

        customer: {
          select: {
            id: true,
          },
        },

        comment: true,

        order: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FeedbackRating })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFeedbackRating(
    @common.Param() params: FeedbackRatingWhereUniqueInput,
    @common.Body() data: FeedbackRatingUpdateInput
  ): Promise<FeedbackRating | null> {
    try {
      return await this.service.updateFeedbackRating({
        where: params,
        data: {
          ...data,

          customer: data.customer
            ? {
                connect: data.customer,
              }
            : undefined,

          order: data.order
            ? {
                connect: data.order,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          rating: true,

          customer: {
            select: {
              id: true,
            },
          },

          comment: true,

          order: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FeedbackRating })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFeedbackRating(
    @common.Param() params: FeedbackRatingWhereUniqueInput
  ): Promise<FeedbackRating | null> {
    try {
      return await this.service.deleteFeedbackRating({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          rating: true,

          customer: {
            select: {
              id: true,
            },
          },

          comment: true,

          order: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
