/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Rental as PrismaRental,
  Feedback as PrismaFeedback,
  Car as PrismaCar,
  Customer as PrismaCustomer,
} from "@prisma/client";

export class RentalServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RentalCountArgs, "select">): Promise<number> {
    return this.prisma.rental.count(args);
  }

  async rentals<T extends Prisma.RentalFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RentalFindManyArgs>
  ): Promise<PrismaRental[]> {
    return this.prisma.rental.findMany<Prisma.RentalFindManyArgs>(args);
  }
  async rental<T extends Prisma.RentalFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RentalFindUniqueArgs>
  ): Promise<PrismaRental | null> {
    return this.prisma.rental.findUnique(args);
  }
  async createRental<T extends Prisma.RentalCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RentalCreateArgs>
  ): Promise<PrismaRental> {
    return this.prisma.rental.create<T>(args);
  }
  async updateRental<T extends Prisma.RentalUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RentalUpdateArgs>
  ): Promise<PrismaRental> {
    return this.prisma.rental.update<T>(args);
  }
  async deleteRental<T extends Prisma.RentalDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RentalDeleteArgs>
  ): Promise<PrismaRental> {
    return this.prisma.rental.delete(args);
  }

  async findFeedbacks(
    parentId: string,
    args: Prisma.FeedbackFindManyArgs
  ): Promise<PrismaFeedback[]> {
    return this.prisma.rental
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .feedbacks(args);
  }

  async getCar(parentId: string): Promise<PrismaCar | null> {
    return this.prisma.rental
      .findUnique({
        where: { id: parentId },
      })
      .car();
  }

  async getCustomer(parentId: string): Promise<PrismaCustomer | null> {
    return this.prisma.rental
      .findUnique({
        where: { id: parentId },
      })
      .customer();
  }
}
