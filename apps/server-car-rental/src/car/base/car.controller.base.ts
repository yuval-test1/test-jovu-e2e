/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CarService } from "../car.service";
import { CarCreateInput } from "./CarCreateInput";
import { Car } from "./Car";
import { CarFindManyArgs } from "./CarFindManyArgs";
import { CarWhereUniqueInput } from "./CarWhereUniqueInput";
import { CarUpdateInput } from "./CarUpdateInput";
import { RentalFindManyArgs } from "../../rental/base/RentalFindManyArgs";
import { Rental } from "../../rental/base/Rental";
import { RentalWhereUniqueInput } from "../../rental/base/RentalWhereUniqueInput";
import { OrderFindManyArgs } from "../../order/base/OrderFindManyArgs";
import { Order } from "../../order/base/Order";
import { OrderWhereUniqueInput } from "../../order/base/OrderWhereUniqueInput";

export class CarControllerBase {
  constructor(protected readonly service: CarService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Car })
  async createCar(@common.Body() data: CarCreateInput): Promise<Car> {
    return await this.service.createCar({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        rentalPricePerDay: true,
        status: true,
        registrationNumber: true,
        make: true,
        model: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Car] })
  @ApiNestedQuery(CarFindManyArgs)
  async cars(@common.Req() request: Request): Promise<Car[]> {
    const args = plainToClass(CarFindManyArgs, request.query);
    return this.service.cars({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        rentalPricePerDay: true,
        status: true,
        registrationNumber: true,
        make: true,
        model: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Car })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async car(@common.Param() params: CarWhereUniqueInput): Promise<Car | null> {
    const result = await this.service.car({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        rentalPricePerDay: true,
        status: true,
        registrationNumber: true,
        make: true,
        model: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Car })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCar(
    @common.Param() params: CarWhereUniqueInput,
    @common.Body() data: CarUpdateInput
  ): Promise<Car | null> {
    try {
      return await this.service.updateCar({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          rentalPricePerDay: true,
          status: true,
          registrationNumber: true,
          make: true,
          model: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Car })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCar(
    @common.Param() params: CarWhereUniqueInput
  ): Promise<Car | null> {
    try {
      return await this.service.deleteCar({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          rentalPricePerDay: true,
          status: true,
          registrationNumber: true,
          make: true,
          model: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/rentals")
  @ApiNestedQuery(RentalFindManyArgs)
  async findRentals(
    @common.Req() request: Request,
    @common.Param() params: CarWhereUniqueInput
  ): Promise<Rental[]> {
    const query = plainToClass(RentalFindManyArgs, request.query);
    const results = await this.service.findRentals(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        totalPrice: true,
        startDate: true,
        endDate: true,

        car: {
          select: {
            id: true,
          },
        },

        customer: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/rentals")
  async connectRentals(
    @common.Param() params: CarWhereUniqueInput,
    @common.Body() body: RentalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rentals: {
        connect: body,
      },
    };
    await this.service.updateCar({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/rentals")
  async updateRentals(
    @common.Param() params: CarWhereUniqueInput,
    @common.Body() body: RentalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rentals: {
        set: body,
      },
    };
    await this.service.updateCar({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/rentals")
  async disconnectRentals(
    @common.Param() params: CarWhereUniqueInput,
    @common.Body() body: RentalWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rentals: {
        disconnect: body,
      },
    };
    await this.service.updateCar({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/orders")
  @ApiNestedQuery(OrderFindManyArgs)
  async findOrders(
    @common.Req() request: Request,
    @common.Param() params: CarWhereUniqueInput
  ): Promise<Order[]> {
    const query = plainToClass(OrderFindManyArgs, request.query);
    const results = await this.service.findOrders(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,
        rentalEnd: true,

        car: {
          select: {
            id: true,
          },
        },

        rentalStart: true,

        customer: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/orders")
  async connectOrders(
    @common.Param() params: CarWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orders: {
        connect: body,
      },
    };
    await this.service.updateCar({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/orders")
  async updateOrders(
    @common.Param() params: CarWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orders: {
        set: body,
      },
    };
    await this.service.updateCar({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/orders")
  async disconnectOrders(
    @common.Param() params: CarWhereUniqueInput,
    @common.Body() body: OrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orders: {
        disconnect: body,
      },
    };
    await this.service.updateCar({
      where: params,
      data,
      select: { id: true },
    });
  }
}
